<객체와 클래스>
java, c++: 객체지향 프로그래밍(Object Oriented Programming) OOP
	   현실세계의 모든 것을 객체화 할 수 있다.

객체: 이 세상의 모든 것은 객체로 이루어져있다.
      즉, 이 세상을 구성하고있는 모든것. (눈에 보이는 것, 추상적인 것)
      객체는 고유한 속성들로 이루어져 있다.

      성빈이가 손에 핸드폰을 들고 이스트백을 메고 은행에 들어간다

      성빈
      		손		속성: 유지되어야할 값 = 필드
		
		든다		동작: 기능
		멘다
		들어간다
	
      클래스(설계도)
      사람
      		손		속성(멤버변수) member variable
		
		든다		동작(멤버 메소드) member method
		멘다
		들어간다

-------------------------------------------------------------------------------
클래스만들기 ex)

사람 Person(자료형)
     속성
            이름 String name        "홍길동"
	    혈액형 String BloodType "AB'

     동작   먹는다  void eat(String food)
     	    움직인다 void move(String direction)

-------------------------------------------------------------------------------

객체지향 프로그래밍의 측징
1) 은닉성(Encapsulation): 클래스는 속성(멤버변수)과 동작(멤버메소드)로 구성
			  되는데 일반적으로 속성은 외부의 클래스들에게 노출
			  하지않는다.
			  ==> 접근명시자(modifier)
			      private : 클래스 자신만 사용할 수 있는 멤버영역
			      		일반적으로 클래스의 속성(멤버변수)들은
					private영역에 둔다

			      public  : 모든 클래스에서 사용할 수 있는 멤버영역
			      		일반적으로 클래스의 기능(멤버메소드)들은
					public에 둔다

setter(설정자)
	private 멤버변수에 접근하여 값을 바꾸는 메소드
getter(접근자)
	private 멤버변수에 접근하여 값을 읽어오는 메소드

-------------------------------------------------------------------------------
<생성자(constructor)>
==> 객체 생성시에 자동수행되어 멤버변수들의 값을 특정한 값으로 초기화 하기
    위하여 사용하는 특수한 메소드. 
    생성자는 클래스 이름과 같은 이름의 메소드로 정의되고 일반메소드는 호출
    해야만 동작하지만 생성자는 객체 생성시에 자동수행된다.

    일반메소드는 호출문에 의하여 동작하고 메소드의 내용이 끝나면 자신을 
    호출한 위치로 return하는 구조이기 때문에 메소드 이름앞에 return값의
    자료형을 써준다.
    그러나 생성자는 메소드처럼 호출문에의해 동작하는 것이 아니라 객체 생성시에
    자동수행하기 때문에 return의 개념이 없다.
    즉 생성자이름앞에 return타입을 쓰지않는다.
    void라고도 쓰면 안된다. void라고 쓰면 return값이 없다는 뜻. 
