class를 만들 때 main()이 있는 클래스앞에만 public을 붙힌다.
그렇지 않으면 오류가 난다.

<생성자>
클래스 이름과 동일한 이름의 메소드를 말하며 객체 생성시에 자동수행하여 
멤버변수들의 값을 초기화 할 목적으로 사용한 특수한 메소드

<생성자 중복정의>
생성자는 필요에 따라 중복하여 정의할 수 있다.
단, 중복하여 정의하려면 매개변수의 개수가 다르거나 자료형이 달라야한다.\
생성자가 중복정의 되어있을 때 생성자안에서 나 말고 다른 생성자를 호출할
수 있다. this()
this()는 반드시 생성자의 첫번째 문장에 와야한다. 

<기본생성자>
자바는 "기본생성자"를 제공한다. "기본생성자"는 매개변수를 갖지않는 
생성자를 말한다. 그런데 만약 사용자가 생성자를 하나라도 만들게 되면
더이상 "기본생성자"를 제공하지않는다.


<this 키워드>
this
: 생성자나 멤버메소드의 매개변수 이름을 의미있는 이름으로 정해주다보면
  멤버변수 이름과 겹치게 된다. 이때 멤버변수 자신을 구별할 목적으로 사용.
  ex) this.name = name

this()
: 생성자가 중복정의 되어있을 때 생성자 안에서 나말고 다른 생성자를 요구할
  때 사용. 반드시 첫번째 문장에 와야한다. 

  ---------------------------------------------------------------------------------------
  <메소드의 중복정의>
  method overloading 메소드 오버로딩
  : 같은 이름의 메소드가 중복정의 될 수 있다.
    매개변수의 개수가 다르거나 자료형이 달라야한다.

 <static>
 : 클래스의 멤버변수명이나 멤버메소드명 앞에 올 수 있다.
   만약 어떤 변수가 객체마다 메모리를 따로 확보할 필요없이
   모든 객체가 공동으로 사용할 메모리가 필요하다면 static을
   붙힌다.
   또, 이것은 객체를 생성하지 않고도 사용할 수 있다.
   객체없이 사용해야하니 클래스 이름으로 접근한다.
   ==> 클래스변수(정적 변수, static 변수)

   어떤 클래스의 메소드를 사용하려면 반드시 그 클래스의 
   객체를 생성하고 그 객체를 사용할 수 있다.
   그런데 만약 객체없이도 메소드를 사용하고자한다면 메소드
   앞에 static을 붙힌다. 이렇게하면 객체를 생성하지않고 클
   래스 이름으로 사용할 수 있다.
   ==> 클래스 메소드(정적 메소드, static method)
   --------------------------------------------------------------------------------------

  static은 클래스의 멤버변수 이름이나 멤버메소드 이름앞에 올 수 있다.
  만약 어떠한 멤버변수가 객체와 무관하게 객체없이도 사용하고자 하거나
  혹은 모든 객체가 공동으로 사용할 기억공간이 필요하면 변수명 앞에 
  static 키워드를 붙여 클래스 변수로 사용한다. 

  어떠한 클래스의 멤버메소드를 사용하려면 반드시 그 클래스의 객체를
  생성하고 그 객체를 통해서 호출할 수 있다.
  그런데 만약 객체없이도 그 메소드를 사용하게 하고자 한다면 메소드명 앞에
  static을 붙여 클래스 메소드로 사용한다. 

  ***************************************************************************************
 static 메소드는 static멤버에만 접근할 수 있다. 객체를 생성해야
 사용할 수 있는 일반멤버에는 접근할 수 없다.
 ****************************************************************************************

 - 메소드 중복정의
 - this, this()
 - static
 - 