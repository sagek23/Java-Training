추상클래스는 추상메소드 뿐 아니라 멤버변수와 body가 구체화된
메소드를 가질 수 있다.

추상클래스의 객체는 생성할 수 없다.

-------------------------------------------------------------------------------

상속관계에 있을 때 부모의 참조변수가 자식클래스의 객체를 
참조할 수 있다

1) 자식클래스에는 없고 부모클래스에만 있는 멤버를 사용할 
수 있다.

2)부모클래스의 동일멤버가 자식클래스에 있는 경우(오버라이딩)
자식클래스의 멤버가 우선순위가 높다.

3) 자식에서 새로 추가된 멤버가 있으면 부모가 참조 불가. 
참조하기 위해서는 형변환을 한다.

형변환 형식: ((자식클래스)부모의 참조변수).자식의 추가된 멤버메소드();

-------------------------------------------------------------------------------

부모클래스의 참조변수는 자식클래스의 객체를 참조할 수 있다.
부모클래스가 자식클래스의 객체를 참조하면 자식클래스를 모두
포함할 수 있다. 

instanceof연산자
참조변수가 참조하는 객체의 타입을 검사해야 할 때 instanceof 
연산자를 사용한다. instanceof는 참조변수가 참조하는 객체의 
타입을 검사하는 연산자로서 if문과 함께 사용한다.

-------------------------------------------------------------------------------

메소드 호출
1) 값에 의한 호출(Call by Value)
메소드 호출시에 기본자료형이 매개변수로 전달되는 경우를 말한다.
- 메소드 호출시에 매개변수로 전달된 값이 메소드안에서 변경되더라도
변경된 내용이 메소드를 호출한 쪽에서 적용되지않는다.

2) 참조에 의한 호출(Call by Reference)
메소드 호출시에 참조자료형(객체변수, 배열)이 매개변수로 전달되는
경우를 말한다.
- 메소드 호출시에 매개변수로 전달된 참조변수의 내용이
변경되면 변경된 내용이 메소드 호출한 쪽에서 적용이 된다. 

-------------------------------------------------------------------------------

인터페이스
자바에서는 클래스의 다중상속이 불가. 다중상속의 효과를 기대할 목적으로
인터페이스를 이용한다.
인터페이스도 클래스와 마찬가지로 "새로운 자료형"의 개념이다.
인터페이스는 "완전추상"의 개념으로 인터페이스의 구성요소는 '상수'와 
'추상메소드'만으로 구성된다.
'상수'는 값을 변경시킬 수 없고 '추상메소드'는 메소드 선언부만으로
구성되어야한다.
"완전추상"이기 때문에 메소드명 앞에 별도로 abstract을 넣지 않아도 된다.
인터페이스를 확장하여 새로운 인터페이스를 만들 수도 있고 인터페이스를
구현한 클래스를 만들 수도 있다. 

interface A
{
}

interface B extends A
{
}

class c implements A
{
}

클래스는 다중상속이 불가능하지만, 인터페이스를 이용하면 다중상속의 효과를
기대할 수 있다.

-------------------------------------------------------------------------------
class A
{
}

class B
{
}

class C extends A, B 
{
}는 불가.

-------------------------------------------------------------------------------

class A
{
}

interface B
{
}

class extends A implements B
{
}는 가능.
-------------------------------------------------------------------------------

interface A
{
}

interface B
{
}

class c implements A, B
{
}는 가능

-------------------------------------------------------------------------------

class A
{
}
interface B
{
}

interface C
{
}

class D extends A implements B, C
{
}

-------------------------------------------------------------------------------
클래스의 확장은 하나만 가능하지만 interface의 구현은 제한이 없다.
즉, 다중상속의 효과를 기대할 목적으로 interface를 사용한다.
인터페이스는 미래에 만들어질 후손들의 '상수'와 '메소드 선언부'
만으로 구성된다.
즉, 멤버변수나 body가 구체화된 멤버메소드를 가질 수 없다.
-------------------------------------------------------------------------------
<인터페이스>
자바는 클래스의 다중상속이 불가.
다중상속의 효과를 기대할 목적으로 인터페이스 이용.

인터페이스는 완전추상의 개념으로 미래에 만들어질 후손들이 가져야할
'상수'와 '추상메소드'만으로 구성. 따라서 변수명 앞에 final을 붙이지
않아도 자동 final.

메소드명 앞에 abstract을 붙이지 않아도 자동 abstract.
(추상클래스에서 추상메소드외에는 body가 있는 메소드를 포함할 수
있지만, interface는 '완전추상'이므로 모든 메소드가 body를 포함할 
수 없다)

클래스에서 인터페이스를 구현할 때에는 implements 키워드를 사용.

인터페이스를 확장하여 새로운 인터페이스를 만들고자 할 때는 
extends 키워드를 사용.
-------------------------------------------------------------------------------
abstract 
메소드 이름 앞, 클래스 이름 앞에 올 수 있다.

final
멤버변수명 앞에: 값을 변경할 수 없는 상수를 만들고자 할 때
멤버메소드명 앞에: 오버라이딩 금지
클래스명 앞에: 상속금지
