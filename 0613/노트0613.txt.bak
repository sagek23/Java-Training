<컬렉션 프레임워크>
Set: 중복을 허용하지 않는다.
     HashSet, LinkedHashSet, TreeSet

List: 중복을 허용.
      ArrayList, LinkedList
      list의 중간에 데이터를 추가, 
      삭제할 일이 빈번하다면
      LinkedList를 사용하는 것이 좋다.

Map: key, value로 이루어진 자료구조.
-------------------------------------------------------------------------------

예외처리(Exception handling)
: 사용자 부주의 등으로 인하여 예기치않은 상황에 대한 처리

예외처리 방법: 예외가 발생할 만한 문장들을 try{}문으로 묶고 예외가 
	       발생하였을 때 처리할 문장은 catch(){}절에 표현

		try
		{예외가 발생한만할 문장
		
		}catch(예외클래스명 변수명)
		{
		   처리할 문장
		}
		catch(예외클래스명 변수명)
		{
		   처리할 문장
		}
		finally{
		   예외가 발생하든 정상처리되든 반드시
		   동작시켜야 할 내용
		}
		
하나의 try{}문에 cat(){}절은 여러개가 올 수 있는데 반드시 좁은 범위의 
예외클래스에서 큰범위 예외클래스 순으로 기입해야한다. 

-------------------------------------------------------------------------------

RunTimeException의 후손들은 사용시 사용자가 직접 예외처리 
하지않아도 java에서 예외처리를 실행 시에 해준다. 필요하다면
선택적으로 사용자가 예외처리 할 수 있다.

그러나 RunTimeException이외의 예외들은 반드시 사용자가 예외처리해야한다.

그 대표적인 것들이 

입출력 프로그램 (java.io)
네트워크 프로그램 (java.net)
데이터베이스 연결프로그램 (java.sql)

throws:
메소드 안에 예외를 포함하는 경우 메소드 안에서 예외처리를 하지 않고
메소드 호출하는 쪽으로 예외를 전파하기 위한 키워드

ex)
public void div(int a, int b) throws ArithmeticException
{
	System.out.println(a/b);
}

-------------------------------------------------------------------------------

<사용자정의 예외>
대부분의 일반적인 예외에 대해서는 자바에 이미 클래스로 만들어져있다.
자바가 알지 못하는 특별한 상황에 대하여 사용자가 예외를 만들 수 있다.

<사용자정의 예외 만드는 방법>
Exception을 확장하여 클래스를 만든다.
이때 클래스 이름을 의미있는 이름으로 정해준다.

우리가 정한 그 상황은 자바는 모르기 때문에 그 상황이 되어도 자바가
자동으로 예외를 생성해주지 않는다.
사용자가 강제로 예외를 발생시켜야한다.

ex)
int []arr = {1,2,3};
arr[5]

new ArrayIndexOutOfBoundsException();

throw 키워드를 이용하여 사용자정의 예외를 강제로 발생시킨다.
throw는 보통 사용자정의예외처리시 사용. 

	throw new 사용자정의예외();

