<사용자 계정 만들기>
system계정만 계정을 만들어줄 수 있다.
create user 사용자이름 identified by 암호

사용자이름: bit1234
암호: bit1234

**현재 버전에는 사용자이름앞에 c##을 붙여야함

<사용자계정에 권한 부여>
grant connect, resource, dba to c##bit1234;

-------------------------------------------------------------------------------
<테이블생성>
데이터베이스에 자료를 저장하기 위해서는 '테이블'을 만든다.

create table 테이블명(속성명 자료형, 속성명 자료형, ...)

ex) create table member (name varchar2(20), age number)

<테이블 삭제>
drop table 테이블명

<사용자 삭제>
drop user 유저명

-------------------------------------------------------------------------------
<테이블에 자료 추가하기>

insert into 테이블명 values(값1, 값2);
값의 수는 테이블의 속성의 수와 동일하고 순서를 유지해야한다.

ex) insert into 테이블명 values('홍길동', 20);

오라클에서 문자열은 홑따옴표''로 묶어야한다.

<자료의 확인>
select 속성1, 속성2,... from 테이블명;

ex)select name from memner;
   select age from member;
   select name, age from member;
   select * from member;
 
 select로 출력시 자료의 순서가 없음.
 정렬을 해야 순서대로 출력
 ------------------------------------------------------------------------------
<자바에서 오라클DB에 연결하여 DB명령어를 실행하는 프로그램>
 
JDBC(Java DataBase Connect)

1.오라클이 설치된 경로에서 JDBC 드라이버를 JDK 홈디렉토리로 복사한다.

C:\app\BITSC-7\product\18.0.0\dbhomeXE\jdbc\lib의 ojdbc8.jar를 
C:\Program Files\AdoptOpenJDK\jdk-8.0.212.03-hotspot\jre\lib\ext와
C:\Program Files\AdoptOpenJDK\jdk-8.0.212.03-hotspot\lib에 복사. 

자바에서 데이터베이스에 실행시키는 모든 동작은 예외를 가지고있기때문에  
예외처리를 해주어야함.

-------------------------------------------------------------------------------
try{
`	String sql = "insert into member values('"+name+"',"+age+")";
	//member테이블에 name과 age의 값을 넣을 경우		
	//1.JDBC 드라이버를 메모리로 로드한다.
	Class.forName("oracle.jdbc.driver.OracleDriver");
			
	//2. DB서버에 연결한다.
	Connection conn = DriverManager.getConnection
	("jdbc:oracle:thin:@203.236.209.97:1521:XE", "c##bit1234", "bit1234");
	//@뒤는 IP주소:1521:XE
			
	//3.Statement 객체를 생성. sql명령어 실행기능을 가지고 있는 클래스
	Statement stmt = conn.createStatement();
	
	//4.데이터베이스 명령을 실행 
	//executeQuery(자료확인), 
	//executeUpdate(자료추가, 수정, 삭제 등 DB에 변동이 있을 때 )
	int re = stmt.executeUpdate(sql);
	if (re==1)
		System.out.println("추가성공");
	else
		System.out.println("추가실패");
	//5.사용했던 자원을 닫아준다. 나중에 만든 것부터 닫기/
	stmt.close();
	conn.close();
	}catch (Exception e) {
			System.out.println(e.getMessage());
			}

-------------------------------------------------------------------------------
<primary key>

다른레코드와 구별하기위한 식별자로 중복될 수 없는 값.
속성 중에 중복을 허용하지않고 값이 없는 상태(null)를 
허용하지않는 속성에 primary key를 설정한다.
반드시 primary key를 설정해야한다.

주키(primary key)는 속성명 자료형 primary key 순으로 기입
ex) (num number primarykey, name varchar(20));

desc 테이블명; 테이블 표시 명령어

<commit과 rollback>

데이터베이스에 변동이 있는 명령어를 반영하기 위한 명령어
==> commit (트랜잭션을 반영)
단, 프로그램에서는 auto commit으로 커밋하지않아도 됨.

취소하기위한 명령어 ==> rollback (트랜잭션을 취소)

<트랜잭션>
논리적인 작업의 단위
어떤 일처리를 위해서는 서로 관련있는 데이터베이스 
명령어가 모여서 일처리가 이루어지는 경우를 말한다.



숙제) student table에 자료를 추가하고 모든 학생의 정보를 출력하는 
GUI프로그램을 작성.