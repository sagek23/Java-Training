<DDL>

<DML>
1. 자료추가 - insert
2. 자료검색 - select
3. 자료수정 - update
4. 자료삭제 - delete

<자료검색>
 질의문 Query

 select 컬럼이름 from 테이블 [where 조건식] [group by 컬럼] [order by 컬럼];

 -----------------------------------------------------------------------------------

 <그룹함수(집계함수)>
  숫자인 컬럼에 대한 평균, 총합, 최대값, 최소값, 개수등에 집계를 위한 함수

  avg, sum, max, min, count

  그룹함수의 결과는 1건으로 다른 일반 속성과 같이 사용할 수 없다.
  그러나 컬럼의 종류별로 그룹함수를 사용할 때는 group by 컬럼으로 표현하여
  그 컬럼이름을 select에 표현할 수 있다. 

  연습) 도서의 가격중에 가장 비싼도서의 금액을 출력
  select max(price) from book;

  연습) 출판사별 가장 비싼 도서의 금액을 출력
  select max(price), publisher from book where price is not null group by publisher;

  select max(price), publisher, bookname from book group by publisher는 오류
  group by 절에 오는 컬럼만이 select에 올 수 있다.

------------------------------------------------------------------------------------

   <having>
   group by 절의 결과에 대하여 조건식을 부여하고자 할 때 사용.

   연습) 출판사별로 도서의 최고가격을 출력하세요. 단, 최고가격이 2만원
   이상인 출판사만 출력한다. 최고금액이 높은 순으로 출력. 동일할 때에는 
   출판사이름 순으로 출력

   select max(price), publisher from book group by publisher having 
   max(price) >=20000 order by max(price) desc, publisher;


   연습)"대한민국"에 거주하는 고객이 주문한 내용에 대하여 도서별 판매수량을
   출력하시오. 단, 판매수량이 2개 이상인 도서를 출력하고 판매수량이 높은 순으로 출력.
   판매수량이 동일할 때에는 도서이름 순으로 출력.

   select count(orderkid), bookname from orders o, customer c, book b where o.bookid
    = b.bookid and c.custid = o.custid and address like '대한민국%' group by bookname 
   having count(orderkid)>=2 order by count(orderkid), bookname; 

------------------------------------------------------------------------------------
집계함수 중에 count는 count(컬럼이름)과 count(*)으로 사용할 수 있다.
그러나 두개의 결과가 늘 동일하지는 않다.

count(컬럼이름)은 컬럼의 값이 null이 아닌 수를 반환한다.
count(*)는 모든 레코드의 수를 반환한다.


<join>
검색해야할 컬럼이 하나의 테이블에 있지않고 여러개의 테이블에 있을 경우
join을 이용하여 검색.

select 컬럼이름 from 테이블1, 테이블2, 테이블n...
where 테이블1.컬럼 = 테이블2.컬럼

where 조건식에는 두개의 테이블에 공통으로 들어가는 컬럼으로 조건식을 표현.


customer(custid pk, name, address, phone)
book(bookid pk, bookname, publisher, price)
orders(orderkid pk, custid fk, bookid fk, saleprice, orderdate)

연습) 구매를 한 고객의 이름을 출력
select distinct name from orders o, customer c where o.custid = c.custid;


create table dept(
dno number primary key,
dname varchar2(20),
dloc varchar2(20)
);

create table emp(
eno number primary key,
ename varchar2(20),
addr varchar2(20),
sal number,
comm number,
job varchar2(20),
tel varchar2(20),
hiredate date,
mgr number,
dno number references dept(dno)
);


insert into dept values(100, '기획부', 인천');
insert into dept values(200, '영업부', '서울');
insert into dept values(300, '개발1부', '제주도');
insert into dept values(400, '개발2부', '서울');
insert into dept values(500, '인사부', '서울');

연습) "개발1부"에 근무하는 모든 사원의 이름, 급여, 입사일을 출력
단 입사일순으로 출력하고 동일하면 이름순으로 출력
select ename, sal, hiredate from emp e, dept d where e.dno = 
d.dno and dname = '개발1부' order by hiredate, ename;

연습)"개발1부" 부장의 사원번호, 이름, 부서번호, 부서위치, 주소를 출력
select eno, ename, e.dno, dloc, addr from emp e, dept d where e.dno = 
d.dno and job = '부장' and dname = '개발1부';

연습)부서별 근무자의 수를 출력. 근무자의 수가 6명 이상,
근무자의 수가 높은 순으로 출력.
select count(*), dname from emp e, dept d where e.dno = d.dno group by dname
having count(*)>=6 order by count(*) desc;

연습) 서울에 근무하는 근무자들의 평균급여 출력
select avg(sal), from emp e, dept d where e.dno = d.dno and dloc = '서울';


연습) 서울에 근무하는 근무자들의 부서별 평균급여를 출력.
평균급여가 250이상인 부서만 출력하고 급여가 높은 순으로 출력
select dname, avg(sal) from emp e, dept d where e.dno = d.dno and dloc = '서울' 
group by dname having avg(sal)>=250 order by avg(sal) desc;

------------------------------------------------------------------------------------

연습) 모든 사원의 수를 출력
select count(eno) from emp;

연습) 직책별 사원의 수
select job, count(eno) from emp group by job; 


<join의 종류>

1. inner join:
   두개의 테이블에 모두 조건식을 만족하는 레코드를 출력

2. outer join:
   두개의 테이블 중에 조건식을 만족하지않는 레코드로 출력
   left outer join- 왼쪽에 있는 테이블의 내용은 조건을 
		    만족하지 않아도 모두 보여준다.

   right outer join- 오른쪽에 있는 테이블의 내용은 조건을
   		     만족하지 않아도 모두 보여준다.

   full outer join - 양쪽의 모든 테이블의 내용을 조건에
   		     맞지 않아도 보여준다.
		     
3. self join: 
   어떤 속성이 다른테이블의 주식별자를 참조하는 것이 아니라
   자기자신의 테이블의 주식별자를 참조하는 경우 물리적인
   테이블은 1개인데 이것을 마치 2개인것처럼 애칭을 주어
   조인하는것을 말한다.

 
<inner join>
두개의 테이블에 조건식을 모두 만족하는 레코드만 출력.

연습) 모든 사원이 근무하는 부서명과 사원명을 출력

select dname, ename from dept d, emp e where d.dno = e.dno;

select dname, ename from dept inner join emp on dept.dno = emp.dno;
위의 두개는 같은 표현


근무자가 없는 "기획부"
부서번호가 정해지지않은 "홍길동"은 출력되지 않는다.
insert into emp values(2020, '홍길동', '인천', 250, 30, 
'사원','116','2018/12/05', 1001, null);


<outer join>
두개의 테이블 중에 왼쪽, 오른쪽 혹은 양쪽 다 조건을 만족하지않아도 출력.

 1. left outer join 
 왼쪽에 있는 테이블의 내용은 조건을 만족하지 않아도 모두 보여준다.

 2. right outer join -
 오른쪽에 있는 테이블의 내용은 조건을 만족하지 않아도 모두 보여준다.

 3. full outer join
 양쪽에 있는 테이블의 내용은 조건을 만족하지 않아도 모두 보여준다.

연습) 모든 근무자들의 부서명과 사원명을 출력하시오. 단, 근무자가 없는
부서명도 출력하라. 

select dname, ename from dept left outer join emp on dept.dno = emp.dno;

연습) 모든 근무자들의 부서명과 사원명을 출력하시오. 단, 부서명이 없는
사원명도 출력하라. 
select dname, ename from dept right outer join emp on dept.dno = emp.dno;

연습) 모든 근무자들의 부서명과 사원명을 출력하시오. 단, 근무자가 없는
부서명과 부서명이 없는 사원명도 출력하라. 
select dname, ename from dept d full outer join emp e on d.dno = e.dno;


<self 조인>


연습) 모든 사원의 사원이름과 그 관리자번호를 출력
select eno, ename, mgr from emp;

연습) 모든 사원의 사원이름과 그 관리자이름을 출력
select e.ename,  m.ename from emp e, emp m 
where e.mgr = m.eno;

연습) 모든 근무자의 근무자이름, 관리자이름을 출력.
단, 관리자가 없는 근무자도 출력

select e.ename,  m.ename from emp e left outer join 
emp m on e.mgr = m.eno;

------------------------------------------------------------------------------------
<서브 쿼리>
sql문(질의문)에 포함되는 또 다른 sql문(질의문)을 말한다.

연습) 가격이 가장 비싼 도서의 이름을 출력
select max(price) from book;

select bookname from book where price = 35000;

서브쿼리 예시
select bookname from book where price = (select max(price) from book); 

연습) '개발1부'에 근무하는 모든 근무자들의 이름, 급여를 출력
select ename, sal from emp where dno =  (select dno from dept where dname = '개발1부');

연습) 가장 비싼 도서를 구매한 고객의 이름을 출력
select name from customer where custid = 
(select custid from orders where saleprice = 
(select max(saleprice) from orders));


select name from customer where custid = 
(select custid from orders where bookid = 
(select bookid from book where price = 
(select max(saleprice) from orders)));




가장 비싼 도서를 구매한 고객의 이름과 구매일을 출력
select name, orderdate from orders, customer 
where customer.custid = (select custid from orders where saleprice = 
(select max(saleprice) from orders)) 
and orders.orderkid = (select orderkid from orders where saleprice = 
(select max(saleprice) from orders));


select name, orderdate from customer, orders where customer.custid = 
(select custid from orders where bookid = 
(select bookid from book where price = 
(select max(price) from book))) 
and orderkid = 
(select orderkid from orders where
bookid = (select bookid from book where price= 
(select max(price) from book)));


-join과 서브쿼리 둘 다 가능한 경우도 있고 서브쿼리로만 해결되는 경우가 
있기때문에 둘 다 사용. 

join은 일일이 데이터를 비교하므로 서브쿼리에 비해 성능이 떨어질 수 있다.
서브쿼리를 사용하면 성능향상을 기대할 수 있다.

연습) 박지성 고객이 주문한 도서의 이름을 출력
select bookname from book 
where bookid in (select bookid from orders where custid = 
(select custid from customer where name = '박지성'));

<다중행 연산자>
서브쿼리의 결과가 다중행일때 사용하는 연산자들.
in '='을 대신
not in !=
 >,<, >=, <= 는	any, all, some 등과 같이 사용.
 비교연산자는 서브쿼리 값이 하나일 때만 사용가능. 

    where 컬럼명 > any (서브쿼리)
    :컬럼의 값이 서브쿼리의 행의 결과들보다 하나라도 크다면

    where 컬럼명 > all (서브쿼리)
    :컬럼의 값이 서브쿼리의 행의 모든 결과들보다 크다면
 


서브쿼리에서 where 컬럼명 = 에서 결과값이 여러개일 때 
'='은 사용할 수 없고 대신 'in'을 사용한다.

where 컬럼명 in

연습)"축구의 역사"를 구매한 고객의 이름을 출력
select name from customer where custid in 
(select custid from orders where bookid =
(select bookid from book where bookname = '축구의 역사'));

연습) 굿스포츠의 모든 도서의 가격보다 더 비싼 도서를 구매한 고객의 이름 출력
select name from customer where custid in
(select custid from orders where bookid in
(select bookid from book where price > all 
(select price from book where publisher = '굿스포츠')));


