FrontController
모든 요청을 받아들이는 Controller를 말한다.

listCustomer.do 요청에 의해 동작할 컨트롤러를 
ListCustomerController로 만들고

listGoods.do요청에 의해 동작할 컨트롤러를 
ListGoodsController로 따로 만들었다.

각 요청에 의해 동작할 컨트롤러랄 각각 따로 만들었다.

오늘은 이러한 모든 요청을 받아들이는 컨트롤러를 만들려고한다.

@WebServlet("*.do")로 설정하여 모든 .do에 접근할 수 있도록 한다.

------------------------------------------------------------------------------------
FrontController 
사용자의 모든 요청을 파악하는 컨트롤러
요청에 따른 각각의 Controller를 따로따로 만들 수도 있지만 일반적으로
MVC패턴에서는 사용자의 모든 요청을 파악하는 FrontController를 사용한다.
즉, 웹어플리케이션에 정문앞에 서서 사용자의 요청을 파악하여 해당 요청에
따른 일처리를 위한 모델을 결정하고 모델에게 일처리를 맡긴 후 그 처리된
결과에 따라 이동할 view를 결정한다.

그런데 사용자의 요청에 따르는 일처리를 위한 메소드가 만약 제각각이라면,
ex) lbook.do BookDao의 listBook()메소드를 호출하고
    icust.do CustomerDao의 insertCustomer를 호출하려고하는 등
    서비스 해야할 수가 200개라면 판별해야하는 if의 수가 200개가 된다.

어떻게 하면 if문을 사용하지 않을 수 있을까?
==> 사용자의 요청의 일처리를 위한 클래스를 일반화하려고 한다.
예를 들어 lbook.do 요청에 의해 일처리를 위한 담당클래스는 ListBookAction
이라고 하고, 또, icust.do 요청의 일처리를 위한 담당클래스는 InsertCustomer
Action이라고 하려고 한다.
이것을은 각각 일처리를 위한 메소드가 제각각이 아니고 통일되게 proRequest()
하나의 메소드 이름을 갖도록 하려고한다.

그러려면 BitAction이라는 인터페이스를 만들어두고 그 인터페이스의 메소드로 
proRequest()를 선언하도록하고 앞으로 만들어지는 모든 ~Action들은 BitAction의
후손이 되도록 한다. 

반드시 자신에게 맞도록 proRequest()를 오버라이딩해야하는 책임이 있게한다. 

------------------------------------------------------------------------------------
모든 도서목록	lbook.do  ==> ListBookAction	proRequest
모든 고객목록	lcust.do  ==> ListCustomerAction    proRequest
