Listner: 웹어플리케이션에서의 이벤트 처리
	 -웹어플리케이션이 처음 가동될 때
	 -웹어플리케이션이 종료될 때
	 -세션이 생성될 때
	 -세션이 소멸될 때
	 -세션에 값을 설정할 때
	 -request가 생성될 때
	 -request에 값을 설정할 때
	
--서블릿의 라이프사이클의 이벤트처리에서 실험한 것처럼
각각의 이벤트처리를하여 관련있는 테이블을 생성한다거나
log를 기록하는 등의 일처리를 할 수 있다.
------------------------------------------------------------------------------------
상태유지를 위하여 일반적으로
Cookie: 사용자의 상태를 사용자의 하드디스크에 기록
Session: 사용자의 상태를 서버에 기록
------------------------------------------------------------------------------------

범위에 따른 서버에 상태유지
1)request:	다음 한번 요청할 때 까지 유지/ 요청한 사용자별
2)session:	브라우저가 닫기전까지 유지   / 요청한 사용자별
3)application:  서버가 종료될 때까지 유지    /모든사용자

------------------------------------------------------------------------------------

스프링 프레임워크
** 프레임워크
==> 어플리케이션 개발을 위한 기본적인 뼈대(구조, 환경설정 및 클래스의 모음)

------------------------------------------------------------------------------------

-현재의 웹어플리케이션은 사용자의 빈번한 수정이 요구됨.

어떻게 하면 사용자의 수정에 유연하게 대처할 것인가?
-시간, 인력, 비용을 줄이는 방법

==> 개발자들이 다양한 자신만의 개발패턴을 만들기 시작.

==> 프레임워크

==> 대표적인 프레임워크가 struts, spring

==> 우리나라는 공공프로젝트의 표준(전자정부표준 프레임워크)
스프링이 포함되어 있다.

------------------------------------------------------------------------------------

-spring DI
-spring AOP
-spring MVC
------------------------------------------------------------------------------------

spring 개발환경
-eclipse
-spring tool suite(STS)

------------------------------------------------------------------------------------
DI
==> 자바로 만들어진 소프트웨어 속을 들여다보면 
수많은 클래스(객체)들의 관계로 구성되어있다.

예를들어 A클래스는 B클래스를 사용한다고 가정하자.
B를 사용한다는 것은 B객체를 생성하여 B의 메소드를 
호출할 것이다. 

객체를 생성하기 위해서는 A의 어딘가에 new B()라는 
문장이 있을것이다.

만약 우리의 고객이 A안에 사용되는 B를 B말고 C로 
변경해달라는 요청이 들어왔다고 가정하자.

우리는 new B()라는 문장대신 new C()라고 고쳐야할
것이다. 

B가 사용되어진 곳이 A한곳이 아니라 여러곳이라면
일일이 수정하는 것은 번거로운 일이고 미처 수정되지
못하는 부분도 있을 수 있다.

이러한 경우 어플리케이션에 필요한 객체 B를 자바소스
코드에서 직접 new B()라고 생성하지않고 스프링환경설정에
의해 제공한다면 <bean id="ob" class="~~B">

일일이 관련코드를 수정하지않아도 되며 환경설정파일만
<bean id="ob" class="~~C">로 수정하여 관련코드에 한꺼번에
적용할 수 있다. 
